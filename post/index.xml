<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 生息</title>
    <link>/post/</link>
    <description>Recent content in Posts on 生息</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 17 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>搜索引擎之间一键相互跳转脚本</title>
      <link>/p/21/09/userscript-one-click-jumping/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/09/userscript-one-click-jumping/</guid>
      <description>再挂一个早期写的脚本，不求优雅但求实用。
尽管学术和科技内容，个人更偏好谷歌检索，但也不否认每个搜索引擎都有其各自的长处。比如，百度中可查用户标记的骚扰电话，必应的货币转换识别似乎比谷歌更友好，等等。倘若，完成一次检索后，想再查看另一搜索引擎的结果，一般的操作当然是先复制检索词，然后打开另一搜索引擎的网页，再粘贴检索词，最后回车查看。可是促使世界不断进步的“懒”人，肯定不能安于这种不时再三重复的机械劳动。
这个脚本就是为了解决这一痛点写的，它支持在以下的任意搜索引擎中，通过一个快捷键（加粗的字母表示）自动跳转至另一搜索引擎，并采用与跳转前的页面相同的检索词进行检索：
 g: 谷歌镜像 b: 必应 x: 学术镜像（谷歌） d: 度娘 s: 山寨蒙面谷歌1  （注意：在同一个页面内跳转，即覆盖原检索页面）
功能简单，没什么好展示的了，这里是脚本链接。
  与谷歌搜索的结果一致，但提供更好地匿名性和隐私保护功能。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>科技文章自定义词语高亮显示</title>
      <link>/p/21/09/userscript-scientific-article-word-highlight/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/09/userscript-scientific-article-word-highlight/</guid>
      <description>我们在阅读文章时，有些字词是我们特别想要关注的，幻想如果被标记出来，势必会读得飞起。在浏览器中这可以使用搜索功能，使某些词（即检索词）高亮显示，但毕竟这种姿势也太不“懒”了。故闲暇又水了一个浏览器用户脚本 (userscript)1，通过自行设定想要关注的一至多个主题词（允许使用正则表达式），当文章中一旦出现这些主题词时则自动以高亮显示。结合之前的翻译脚本，又可以愉快的看文献了！
已支持的网站有：
 Inoreader 或 Innoreader Wiley ScienceDirect (Elsevier) Springer Nature Science PNAS  目前主题词的设定，需直接写入脚本中，这是一个示例：
var letI_Wrapper = new wrapTextWithElement (&#39;conservation|\ biological\\s*\\w*\\s*\\w*\\s*invasion|\ restoration|ecosystems?&#39;), &#39;&amp;lt;span class=&amp;quot;coloredWord&amp;quot;&amp;gt;&#39;);  它匹配了如下这些词：
 conservation biological * invasion：此处 * 表示允许词组中间出现任意长度的 0 至 2 个词（含数字） restoration ecosystem 或 ecosystems  在脚本中修改对应位置的主题词，即可实现适合自己的自定义设置。
以下是部分效果展示：
  Figure 1: Innoreader 主题词高亮    Figure 2: Wiley 主题词高亮    Figure 3: Elsevier/ScienceDirect 主题词高亮    Figure 4: Springer 主题词高亮  本人并没有学过 Javascript，这个脚本毫无意外是东拼西凑形成的，遑论组合得优不优雅了，倘始遇到 bug 不要惊慌就是了。</description>
    </item>
    
    <item>
      <title>科技文章标题翻译脚本</title>
      <link>/p/21/08/userscript-scientific-article-title-translation/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/08/userscript-scientific-article-title-translation/</guid>
      <description>最开始是看到小伙伴在开始选题时，在 Web of Science 上使用划词翻译软件快速阅读、筛选大量相关文章——一篇一篇取词、翻译、再取词、再翻译&amp;hellip;&amp;hellip;当然，这是我们大家都很熟悉的动作了。当时，深深觉得这应该是脚本很适合干的活儿。
最近便发现一个十分强大的用户脚本&amp;mdash;&amp;mdash;翻译机：该脚本用于翻译各类常用社交网站为中文，不会经过中间服务器，可以实现这样的功能。这个脚本格式清晰，也比较好入手&amp;quot;借鉴抄袭&amp;quot;。Ta 已经把最核心的调用翻译工具的代码都写好了，并且设定了很友好的框架逻辑，看起来剩下的只要会简单的 CSS 选择器，就可以很方便地&amp;quot;移植抄袭&amp;quot;了。
原脚本支持的翻译网站仅是社交网站，未免太浪费了。内置的翻译源包括：谷歌翻译、有道翻译、 彩云小译、必应翻译等 8 种以上主流的来源1，已经非常强大够用了。
接下来，我们试着加入科技学术论文数据库网站，实现标题的自动翻译。
Web of Science CSS 选择器：
 支持检索页、详情页； 仅一个标题时翻译，多标题时不翻译2，例如，含英文及中文标题时，则不翻译; 已知的 bug：经翻译的详情页无法通过标题上方的 Results 链接返回结果页，该链接被吞。  &#39;WebofScience&#39;:{ name:&#39;WebofScience&#39;, matcher:/https:\/\/.*?.webofscience.com\/.+/, selector:baseSelector(&#39;app-summary-title &amp;gt; \ h3.ng-star-inserted:only-child, \ #snMainArticle &amp;gt; div:nth-child(1) &amp;gt; div:only-child \ #FullRTa-fullRecordtitle-0[class=&amp;quot;title text--large&amp;quot;]&#39;), textGetter:baseTextGetter, textSetter:baseTextSetter }  效果展示：
 Figure 1: WOS 检索页标题翻译  
 Figure 2: WOS 详情页标题翻译  
详情页中的 DOI 跳转和复制按钮使用了另一脚本实现。
Google Scholar CSS 选择器：
&#39;GoogleScholar&#39;:{ name:&#39;谷歌学术&#39;, matcher:/https:\/\/(scholar.</description>
    </item>
    
    <item>
      <title>R 方差分析：以多物种、双因素为例</title>
      <link>/p/21/08/r-anova/</link>
      <pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/08/r-anova/</guid>
      <description>更新：
 2021-08-06 添加三因素及多因素，各因素组内的多重比较  警示：水平有限，以下内容均有可能存在错漏！
如有发现，请下方留言或提交 pull request，感谢您的贡献！
 仅供参考的示例； 没有通用的模板。 了解统计更重要； 照搬后果请自负。
 本分析以多物种、双因素为例，展示常用的方差分析的 R 实现。当然，通过少量的调整，也可以向下兼容：单物种、单因素；也可能向上兼容：三因素至多因素。例如，“三因素”可假想成“双因素中的一个因素再包含一双因素”，一些双因素的函数通过自我函数嵌套，可实现扩展。
一个分析需求，常常对应着多种 R 实现，本示例列举了常用的几种。有些采用 R 中常用的批量（如循环、重复、分组等）计算方式，尽可能地避免使用大量重复代码；有些方法为了篇幅的简洁，仅以局部单一情况做演示，但是它们都可以用类似的方式实现批量计算，参照上下文自行调整即可。
本示例原文档下载地址：https://github.com/pftz/pftz/blob/master/content/post/2021-07-23-r-anova/index.Rmd
示例数据  x，自变量，解释变量，预测变量，独立变量，IV (Independent variables) y，因变量，响应变量，结果变量，依赖变量，DV (Dependent variables)  构建示例用数据  # 构建一个伪造的示例数据框 set.seed(110) df &amp;lt;- data.frame( drought = rep(c(&amp;quot;D25&amp;quot;, &amp;quot;D50&amp;quot;, &amp;quot;D75&amp;quot;), each = 20, times = 2), fertilizer = rep(c(&amp;quot;CK&amp;quot;, &amp;quot;NPK&amp;quot;), each = 60), species = rep(c(&amp;quot;AA&amp;quot;, &amp;quot;BB&amp;quot;, &amp;quot;CC&amp;quot;, &amp;quot;DD&amp;quot;), each = 5, times = 6), biomass = sort(rnorm(120, mean = 0.</description>
    </item>
    
    <item>
      <title>在 Markdown、R Markdown 中使用表格</title>
      <link>/p/21/08/r-markdown-tables/</link>
      <pubDate>Thu, 05 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/08/r-markdown-tables/</guid>
      <description>表格形式 Markdown 表格大概有两种，一种是经数据存储格式转换为标准表格样式，通常是整齐的数据或文本（这里暂称为“转换的数据表格”）；另一种是手动输入为表格形式，一般是为了便于组织内容，使文本更清晰易读（这里暂称为“输入的文本表格”）。
转换的数据表格 在 R Markdown 中可以通过各种包（packages）将数据转为表格形式。在 R Markdown Cookbook 一书中主要介绍了两种方式，knitr::kable() 和 kableExtra 包，后者是对前者的进一步补充和扩展。
书中还列举了一些其它的包，比如：
 flextable 包，支持多种输出格式 huxtable 包，支持多种输出格式 stargazer 包，支持列表 pixiedust 包，为 broom 包整理后的结果创建表格  结合 broom 等包，可以将统计模型与计算的结果便捷的输出为整洁的表格。
输入的文本表格 Mardown 中的表格需要扩展支持，常见的是简单表（simple tables）和管道表（pipe tables），更为复杂的是网格表（grid tables）。
对于 Markdown 解析器（parsers；标记识别符，markup identifier），R markdown 需要 Pandoc 提供支持；blogdown 依赖 Hugo，其 0.60.0 版以后默认使用 Goldmark 识别，尽管也可使用 Pandoc 或 AsciiDoc 等替代；而常用的源代码托管服务平台 Github 自身也支持 Markdown。下面对这些常用的工具进行简单的了解。
Pandoc Pandoc 目前仍不支持合并单元格，不过它们能将各种类型标记的表格渲染成它们所支持的表格样式，参见Better tables。
 扩展：simple_tables  Right Left Center Default ------- ------ ---------- ------- 1 2 34 56 Table: Demonstration of simple table syntax.</description>
    </item>
    
  </channel>
</rss>
