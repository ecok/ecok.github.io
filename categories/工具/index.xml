<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 生息</title>
    <link>/categories/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 生息</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 10 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/categories/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>正则表达式简明指南</title>
      <link>/s/21/10/regex-intro/</link>
      <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/s/21/10/regex-intro/</guid>
      <description>参考来源  Ben Forta (福达). 杨涛等译. 2015. 正则表达式必知必会（修订版）. 人民邮电出版社. Jan Goyvaerts, Steven Levithan. 2012. Regular Expressions Cookbook, Second edition. O&amp;rsquo;Reilly Media. Jeffrey E. F. Friedl. 余晟译. 2012. 精通正则表达式. 电子工业出版社. 资源合集：Awesome Regex | Awesome RegEx 其它学习入口：  正则表达式30分钟入门教程 Learn regex the easy way 中文版 by ziishaned 等 | 学习正则表达式的简单方法 by cdoco 等 Reference - What does this regex mean? Regular Expressions Quick Start Wikipedia: Comparison of regular-expression engines     class: inverse</description>
    </item>
    
    <item>
      <title>xaringan &#43; remark.js 制作幻灯片</title>
      <link>/s/21/10/xaringan-and-remarkjs/</link>
      <pubDate>Tue, 05 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/s/21/10/xaringan-and-remarkjs/</guid>
      <description>class: center, middle, inverse, title-slide
xaringan + remark.js 制作幻灯片 👁 sanchufy 2021-10-05  官方教程 .pull-left[
xaringan  R Markdown 扩展，可结合 remark.js 生成 HTML5 演示文档。
 简明版 Presentation Ninja with xaringan 书籍章节 Chapter 7 xaringan Presentations Wiki 版 yihui/xaringan/wiki ]  .pull-right[
remark.js  使用 JavaScript 和 CSS 将 Markdown 在浏览器内渲染成幻灯片。
 简明版 remark Wiki 版 gnab/remark/wiki ]   两者的主要区别，见：https://slides.yihui.org/xaringan/#15
 class: inverse, middle, center
remark.js Markdown 制作幻灯片（基础） 🎞🎞🎞  remark.</description>
    </item>
    
    <item>
      <title>Markdown 简明指南</title>
      <link>/s/21/10/markdown-intro/</link>
      <pubDate>Mon, 04 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>/s/21/10/markdown-intro/</guid>
      <description>Markdown vs. Word vs. 其它     Word .blue[Markdown] HTML     格式 开放的 XML 的封装 简单标记的纯文本 复杂标记的纯文本   模式 内容、样式同步处理 以内容为主，样式单独设定 通过其它工具生成内容，样式另设定   阅读 所见即所得 (WYSIWYG) 可渲染成多种其它格式 浏览器中查看，可交互   编辑 仅特定软件可以编辑 任意文本编辑器可编辑 鲜少人工直接编辑    其它工具：
 \(\LaTeX\) Microsoft OneNote Adobe Indesign (ID)
&amp;hellip;   其它区别与比较  文件大小 格式转换 版本控制 Git 表格、脚注、引用等高级样式 常见用途：做笔记、写电子邮件、写论文、写书、写博客文章、制作幻灯片等  ???
Markdown 通常用于对样式要求不高的简单任务，比如做笔记，但随着它与其他技术的整合，Markdown 的扩展也不断壮大，现在能实现的格式、样式和功能已经十分丰富了！
 内在哲学（原则） .</description>
    </item>
    
    <item>
      <title>搜索引擎之间一键相互跳转脚本</title>
      <link>/p/21/09/userscript-one-click-jumping/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/09/userscript-one-click-jumping/</guid>
      <description>再挂一个早期写的脚本，不求优雅但求实用。
尽管学术和科技内容，个人更偏好谷歌检索，但也不否认每个搜索引擎都有其各自的长处。比如，百度中可查用户标记的骚扰电话，必应的货币转换识别似乎比谷歌更友好，等等。倘若，完成一次检索后，想再查看另一搜索引擎的结果，一般的操作当然是先复制检索词，然后打开另一搜索引擎的网页，再粘贴检索词，最后回车查看。可是促使世界不断进步的“懒”人，肯定不能安于这种不时再三重复的机械劳动。
这个脚本就是为了解决这一痛点写的，它支持在以下的任意搜索引擎中，通过一个快捷键（加粗的字母表示）自动跳转至另一搜索引擎，并采用与跳转前的页面相同的检索词进行检索：
 g: 谷歌镜像 b: 必应 x: 学术镜像（谷歌） d: 度娘 s: 山寨蒙面谷歌1  （注意：在同一个页面内跳转，即覆盖原检索页面）
功能简单，没什么好展示的了，这里是脚本链接。
  与谷歌搜索的结果一致，但提供更好地匿名性和隐私保护功能。&amp;#160;&amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>科技文章自定义词语高亮显示</title>
      <link>/p/21/09/userscript-scientific-article-word-highlight/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/09/userscript-scientific-article-word-highlight/</guid>
      <description>我们在阅读文章时，有些字词是我们特别想要关注的，幻想如果被标记出来，势必会读得飞起。在浏览器中这可以使用搜索功能，使某些词（即检索词）高亮显示，但毕竟这种姿势也太不“懒”了。故闲暇又水了一个浏览器用户脚本 (userscript)1，通过自行设定想要关注的一至多个主题词（允许使用正则表达式），当文章中一旦出现这些主题词时则自动以高亮显示。结合之前的翻译脚本，又可以愉快的看文献了！
已支持的网站有：
 Inoreader 或 Innoreader Wiley ScienceDirect (Elsevier) Springer Nature Science PNAS  目前主题词的设定，需直接写入脚本中，这是一个示例：
var letI_Wrapper = new wrapTextWithElement (&#39;conservation|\ biological\\s*\\w*\\s*\\w*\\s*invasion|\ restoration|ecosystems?&#39;), &#39;&amp;lt;span class=&amp;quot;coloredWord&amp;quot;&amp;gt;&#39;);  它匹配了如下这些词：
 conservation biological * invasion：此处 * 表示允许词组中间出现任意长度的 0 至 2 个词（含数字） restoration ecosystem 或 ecosystems  在脚本中修改对应位置的主题词，即可实现适合自己的自定义设置。
以下是部分效果展示：
  Figure 1: Innoreader 主题词高亮    Figure 2: Wiley 主题词高亮    Figure 3: Elsevier/ScienceDirect 主题词高亮    Figure 4: Springer 主题词高亮  本人并没有学过 Javascript，这个脚本毫无意外是东拼西凑形成的，遑论组合得优不优雅了，倘始遇到 bug 不要惊慌就是了。</description>
    </item>
    
    <item>
      <title>科技文章标题翻译脚本</title>
      <link>/p/21/08/userscript-scientific-article-title-translation/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>/p/21/08/userscript-scientific-article-title-translation/</guid>
      <description>最开始是看到小伙伴在开始选题时，在 Web of Science 上使用划词翻译软件快速阅读、筛选大量相关文章——一篇一篇取词、翻译、再取词、再翻译&amp;hellip;&amp;hellip;当然，这是我们大家都很熟悉的动作了。当时，深深觉得这应该是脚本很适合干的活儿。
最近便发现一个十分强大的用户脚本&amp;mdash;&amp;mdash;翻译机：该脚本用于翻译各类常用社交网站为中文，不会经过中间服务器，可以实现这样的功能。这个脚本格式清晰，也比较好入手&amp;quot;借鉴抄袭&amp;quot;。Ta 已经把最核心的调用翻译工具的代码都写好了，并且设定了很友好的框架逻辑，看起来剩下的只要会简单的 CSS 选择器，就可以很方便地&amp;quot;移植抄袭&amp;quot;了。
原脚本支持的翻译网站仅是社交网站，未免太浪费了。内置的翻译源包括：谷歌翻译、有道翻译、 彩云小译、必应翻译等 8 种以上主流的来源1，已经非常强大够用了。
接下来，我们试着加入科技学术论文数据库网站，实现标题的自动翻译。
Web of Science CSS 选择器：
 支持检索页、详情页； 仅一个标题时翻译，多标题时不翻译2，例如，含英文及中文标题时，则不翻译; 已知的 bug：经翻译的详情页无法通过标题上方的 Results 链接返回结果页，该链接被吞。  &#39;WebofScience&#39;:{ name:&#39;WebofScience&#39;, matcher:/https:\/\/.*?.webofscience.com\/.+/, selector:baseSelector(&#39;app-summary-title &amp;gt; \ h3.ng-star-inserted:only-child, \ #snMainArticle &amp;gt; div:nth-child(1) &amp;gt; div:only-child \ #FullRTa-fullRecordtitle-0[class=&amp;quot;title text--large&amp;quot;]&#39;), textGetter:baseTextGetter, textSetter:baseTextSetter }  效果展示：
 Figure 1: WOS 检索页标题翻译  
 Figure 2: WOS 详情页标题翻译  
详情页中的 DOI 跳转和复制按钮使用了另一脚本实现。
Google Scholar CSS 选择器：
&#39;GoogleScholar&#39;:{ name:&#39;谷歌学术&#39;, matcher:/https:\/\/(scholar.</description>
    </item>
    
  </channel>
</rss>
